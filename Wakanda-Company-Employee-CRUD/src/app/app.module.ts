import { NgModule, ApplicationRef } from '@angular/core';import { BrowserModule } from '@angular/platform-browser';import { HttpModule } from '@angular/http';import { FormsModule } from '@angular/forms';import { NgxPaginationModule } from 'ngx-pagination'; // pagination module: http://michaelbromley.github.io/ngx-pagination/#/import { AppComponent } from './app.component';import { Wakanda } from './wakanda.service';import { AuthenticationService } from './authentication.service'import { HomeComponent } from './home/home.component';import { BrowserAnimationsModule } from '@angular/platform-browser/animations';// Some modules from Angular material: https://material.angular.io/import { MatDatepickerModule, MatNativeDateModule, MatProgressSpinnerModule, MatDialogModule } from '@angular/material';import { LoginComponent} from './login/login.component';import { EmployeeComponent } from './employee/employee.component';import { ApiService } from './shared';import { routing } from './app.routing';import { AppGuard } from './app.guard';import { removeNgStyles, createNewHosts } from '@angularclass/hmr';import { HeaderComponent } from './shared/components/header/header.component';import { CompanyComponent } from './company/company.component';import { EmployeeDetailComponent, DialogDelete } from './employee-detail/employee-detail.component';import { FilterPipe } from './shared/pipes';@NgModule({  imports: [    BrowserModule,    HttpModule,    FormsModule,    routing,    BrowserAnimationsModule,    MatDatepickerModule,    MatNativeDateModule,    MatProgressSpinnerModule,    MatDialogModule,    NgxPaginationModule  ],  declarations: [    AppComponent,    HomeComponent,    EmployeeComponent,    LoginComponent,    HeaderComponent,    CompanyComponent,    EmployeeDetailComponent,    FilterPipe,    DialogDelete  ],  entryComponents: [DialogDelete],  providers: [    ApiService,    Wakanda,    AuthenticationService,    AppGuard  ],  bootstrap: [AppComponent]})export class AppModule {  constructor(public appRef: ApplicationRef) {}  hmrOnInit(store) {    console.log('HMR store', store);  }  hmrOnDestroy(store) {    let cmpLocation = this.appRef.components.map(cmp => cmp.location.nativeElement);    // recreate elements    store.disposeOldHosts = createNewHosts(cmpLocation);    // remove styles    removeNgStyles();  }  hmrAfterDestroy(store) {    // display new elements    store.disposeOldHosts();    delete store.disposeOldHosts;  }}